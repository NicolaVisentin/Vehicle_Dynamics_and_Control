% Dr. Barys Shyrokau
% Template for homework assignment #3
% RO47017 Vehicle Dynamics & Control
% Use and distribution of this material outside the RO47017 course 
% only with the permission of the course coordinator

clc
close all 
clear mex

% controller settings
Ts = 0.01;	% controller frequency

% vehicle parameters (bicycle model)
veh_parameters;

%% ACADO set up

switch sim_model

    case 'kinematic'

        % Kinematic bicycle
        
        DifferentialState vx yaw Xp Yp;   % definition of controller states
        Control delta;                    % definition of controller input
        
        beta = atan(par.l_r * tan (delta) / par.L);
        f_ctrl = [
            dot(vx)  == 0;...
            dot(yaw) == vx / par.l_r * sin(beta);...
            dot(Xp)  == vx * cos(yaw + beta);...
            dot(Yp)  == vx * sin(yaw + beta)];

    case 'dynamic'
        
        % Dynamic bicycle

        DifferentialState u v r psi x y delta;   % definition of controller states
        Control delta_d;                         % definition of controller input

        a11=-(par.Caf+par.Car)/(par.mass*u);
        a12=(par.l_r*par.Car-par.l_f*par.Caf)/(par.mass*u)-u;
        a21=(par.l_r*par.Car-par.l_f*par.Caf)/(par.Izz*u);
        a22=-(par.l_f^2*par.Caf+par.l_r^2*par.Car)/(par.Izz*u);
        b1=par.Caf/par.mass;
        b2=par.l_f*par.Caf/par.Izz;

        beta = atan(v/u);
        f_ctrl = [
            dot(u) == v*r;...
            dot(v) == a11*v + a12*r + b1*delta ;...
            dot(r) == a21*v + a22*r + b2*delta ;...
            dot(psi) == r;...
            dot(x) == u*cos(psi) - v*sin(psi);...
            dot(y) == u*sin(psi) + v*cos(psi);...
            dot(delta) == delta_d];

end

%% ACADO: controller formulation
acadoSet('problemname', 'PF_problem');
Np = 40;                                  % prediction horizon
ocp  = acado.OCP( 0.0, Np*Ts, Np);        % ACADO ocp

% Residual function definition based on ACADO
h = [diffStates ; controls];
hN = [diffStates];                       % terminal

% Initialization weights
W = acado.BMatrix(eye(length(h)));
WN = acado.BMatrix(eye(length(hN)));     % terminal

% Cost definition
ocp.minimizeLSQ(W,h);
ocp.minimizeLSQEndTerm(WN,hN);           % terminal

% MPC constraints
switch sim_model
    case 'kinematic'
        % Constraints definition
        beta_thd    = 10 / 180*pi;               % absolute sideslip 
        delta_thd   = 360/180*pi / par.i_steer;	 % absolute steering position
        
        % constraints in ACADO 
        ocp.subjectTo( -delta_thd   <= delta    <= delta_thd);
        ocp.subjectTo( -beta_thd   <= beta    <= beta_thd);
    case 'dynamic'
        % Constraints definition
        beta_thd    = 10 / 180*pi;                  % absolute sideslip 
        delta_thd   = 360/180*pi / par.i_steer;	    % absolute steering position
        delta_d_thd = 360*1.5/180*pi / par.i_steer; % absolute steering rate
        
        % constraints in ACADO 
        ocp.subjectTo( -delta_thd   <= delta    <= delta_thd);
        ocp.subjectTo( -beta_thd   <= beta    <= beta_thd);
        ocp.subjectTo( -delta_d_thd   <= delta_d    <= delta_d_thd);
        
end

% define ACADO prediction model
ocp.setModel(f_ctrl);
    
% ACADO settings [Don't change these settings in your HMA]
mpc = acado.OCPexport( ocp );
mpc.set('HESSIAN_APPROXIMATION', 'GAUSS_NEWTON');       % solving algorithm
mpc.set('DISCRETIZATION_TYPE', 'MULTIPLE_SHOOTING');    % discretization algorithm
mpc.set('INTEGRATOR_TYPE', 'INT_IRK_GL2');              % intergation algorithm
mpc.set('NUM_INTEGRATOR_STEPS', 3*Np);                  % number of integration steps
mpc.set('LEVENBERG_MARQUARDT', 1e-4);                   % value for Levenberg-Marquardt regularization -> affects performance
mpc.set('SPARSE_QP_SOLUTION', 'FULL_CONDENSING_N2');
mpc.set('QP_SOLVER', 'QP_QPOASES3');
mpc.set('MAX_NUM_QP_ITERATIONS', 20) ;
mpc.set('HOTSTART_QP','YES');
mpc.set('GENERATE_SIMULINK_INTERFACE', 'YES');

%% Export and Compile flags
EXPORT  = 1;
COMPILE = 1;

% export code to the defined folder
if EXPORT
    mpc.exportCode('export_MPC');
end

% compilation of the S-function using autogenerated make script
if COMPILE
    global ACADO_;
    copyfile([ACADO_.pwd '/../../external_packages/qpoases3'], 'export_MPC/qpoases3')
    cd export_MPC
    make_acado_solver_sfunction
    copyfile('acado_solver_sfun.mex*', '../')
    cd ..
end

%% Initial MPC settings

disp('Initialization')

% initial state conditions
switch sim_model
    case 'kinematic'
        X0       = [V_ref 0 0 0];
    case 'dynamic'
        X0       = [V_ref 0 0 0 0 0 0];
end

% initialize controller bus
input.x  = repmat(X0, Np + 1, 1).';     % size Np + 1
input.od = zeros(Np + 1, 1);            % size Np + 1
Uref     = zeros(Np, 1);
input.u  = Uref.';
input.y  = [repmat(X0, Np, 1) Uref].';  % reference trajectory, size Np + 1
input.yN = X0.';                        % terminal reference, size Np + 1


% initialize weight matrices (redefined in Simulink)
switch sim_model
    case 'kinematic'
        input.W  = diag([0 0 0 5e-3 1e-1]);     % weight tuning !! Tune them in the Simulink model !!
        input.WN = diag([0 0 0 0]);             % terminal weight tuning
    case 'dynamic'
        input.W  = diag([0 0 0 0 0 5e-3 0 1e-1]);  % weight tuning !! Tune them in the Simulink model !!
        input.WN = diag([0 0 0 0 0 0 0]);          % terminal weight tuning
end
input.x0 = X0.';

% controller bus initialization
init.x   = input.x(:).';                 % state trajectory
init.u   = input.u(:).';                 % control trajectory
init.y   = input.y(:).';                 % reference trajectory (up to Np - 1)
init.yN  = input.yN(:).';                % terminal reference value (only for Np)
init.W   = input.W(:).';                 % stage cost matrix (up to Np - 1)
init.WN  = input.WN(:).';                % terminal cost matrix (only for Np)
init.x0  = input.x0(:).';                % initial state value